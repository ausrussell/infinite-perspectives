{"ast":null,"code":"import _classCallCheck from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Russell/WebstormProjects/infinite_perspectives/src/scene.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport Prism from \"./prism\";\n\nvar Scene =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Scene, _Component);\n\n  function Scene(props) {\n    var _this;\n\n    _classCallCheck(this, Scene);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Scene).call(this, props));\n    _this.start = _this.start.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.stop = _this.stop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.animate = _this.animate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.prisms = [];\n    _this.rotateConst = 0.01;\n    return _this;\n  }\n\n  _createClass(Scene, [{\n    key: \"createDomeRoof\",\n    value: function createDomeRoof() {\n      var domeGeometry = new THREE.SphereGeometry(100, 15, 15, 0, Math.PI, 0, -Math.PI / 2); //, Math.PI, Math.PI\n\n      var domeTexture = new THREE.TextureLoader().load(\"images/rough-white-grunge-brick-wall-texture.jpg\");\n      domeTexture.wrapS = domeTexture.wrapT = THREE.RepeatWrapping;\n      domeTexture.repeat.set(12, 12);\n      var domeMaterial = new THREE.MeshBasicMaterial({\n        map: domeTexture\n      });\n      var dome = new THREE.Mesh(domeGeometry, domeMaterial);\n      dome.material.side = THREE.DoubleSide;\n      this.scene.add(dome);\n    }\n  }, {\n    key: \"createPrism\",\n    value: function createPrism() {\n      var _this2 = this;\n\n      var i = 2;\n\n      for (i; i > 0; i--) {\n        this.prisms.push(new Prism());\n      }\n\n      this.prisms.forEach(function (p) {\n        return _this2.scene.add(p.mesh);\n      });\n    }\n  }, {\n    key: \"addFlooring\",\n    value: function addFlooring() {\n      var geometry = new THREE.PlaneGeometry(1000, 1000, 10, 10);\n      geometry.rotateX(-Math.PI / 2);\n      geometry.rotateY(-Math.PI / 2);\n      var floorTexture = new THREE.TextureLoader().load(\"images/wood-texture1.jpg\");\n      floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\n      floorTexture.repeat.set(15, 40);\n      var material = new THREE.MeshBasicMaterial({\n        map: floorTexture\n      });\n      var mesh = new THREE.Mesh(geometry, material);\n      this.scene.add(mesh);\n    }\n  }, {\n    key: \"addLights\",\n    value: function addLights() {\n      var light = new THREE.DirectionalLight(0xffffff);\n      light.position.y = 55;\n      light.position.z = -5;\n      var lightTarget = new THREE.Object3D();\n      lightTarget.position.x = -55;\n      lightTarget.position.z = -25;\n      lightTarget.position.y = 125;\n      light.target = lightTarget;\n      var lightHelper = new THREE.DirectionalLightHelper(light, 5, 0x000000);\n      this.scene.add(lightHelper);\n      this.scene.add(lightTarget);\n      this.scene.add(light);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var width = this.mount.clientWidth;\n      var height = this.mount.clientHeight;\n      var scene = new THREE.Scene();\n      var camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      var renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      var geometry = new THREE.BoxGeometry(20, 21, 1);\n      var material = new THREE.MeshLambertMaterial({\n        color: \"#433F81\"\n      });\n      var cube = new THREE.Mesh(geometry, material);\n      camera.position.y = 14;\n      camera.position.x = 25;\n      camera.position.z = 100;\n      cube.position.x = 50;\n      this.scene = scene;\n      this.scene.add(cube);\n      renderer.setClearColor(\"#000000\");\n      renderer.setSize(width, height);\n      this.camera = camera;\n      this.renderer = renderer;\n      this.material = material;\n      this.cube = cube;\n      this.addLights();\n      this.createPrism();\n      this.createDomeRoof();\n      this.addFlooring();\n      this.mount.appendChild(this.renderer.domElement);\n      this.start();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.stop();\n      this.mount.removeChild(this.renderer.domElement);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      cancelAnimationFrame(this.frameId);\n    }\n  }, {\n    key: \"animate\",\n    value: function animate() {\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01; // this.tri.rotateZ(this.rotateConst);\n\n      this.prisms.forEach(function (p) {\n        return p.rotate();\n      });\n      console.log(\"prisms\", this.prisms);\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    }\n  }, {\n    key: \"renderScene\",\n    value: function renderScene() {\n      this.renderer.render(this.scene, this.camera);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"1000px\"\n        },\n        ref: function ref(mount) {\n          _this3.mount = mount;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Scene;\n}(Component);\n\nexport default Scene; // ReactDOM.render(<Scene />, document.querySelector(\"#root\"));","map":{"version":3,"sources":["/Users/Russell/WebstormProjects/infinite_perspectives/src/scene.js"],"names":["React","Component","ReactDOM","THREE","Prism","Scene","props","start","bind","stop","animate","prisms","rotateConst","domeGeometry","SphereGeometry","Math","PI","domeTexture","TextureLoader","load","wrapS","wrapT","RepeatWrapping","repeat","set","domeMaterial","MeshBasicMaterial","map","dome","Mesh","material","side","DoubleSide","scene","add","i","push","forEach","p","mesh","geometry","PlaneGeometry","rotateX","rotateY","floorTexture","light","DirectionalLight","position","y","z","lightTarget","Object3D","x","target","lightHelper","DirectionalLightHelper","width","mount","clientWidth","height","clientHeight","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","BoxGeometry","MeshLambertMaterial","color","cube","setClearColor","setSize","addLights","createPrism","createDomeRoof","addFlooring","appendChild","domElement","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","rotation","rotate","console","log","renderScene","window","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport Prism from \"./prism\";\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n    this.prisms = [];\n    this.rotateConst = 0.01;\n  }\n\n  createDomeRoof() {\n    let domeGeometry = new THREE.SphereGeometry(\n      100,\n      15,\n      15,\n      0,\n      Math.PI,\n      0,\n      -Math.PI / 2\n    ); //, Math.PI, Math.PI\n    let domeTexture = new THREE.TextureLoader().load(\n      \"images/rough-white-grunge-brick-wall-texture.jpg\"\n    );\n    domeTexture.wrapS = domeTexture.wrapT = THREE.RepeatWrapping;\n    domeTexture.repeat.set(12, 12);\n    let domeMaterial = new THREE.MeshBasicMaterial({ map: domeTexture });\n    let dome = new THREE.Mesh(domeGeometry, domeMaterial);\n    dome.material.side = THREE.DoubleSide;\n    this.scene.add(dome);\n  }\n\n  createPrism() {\n    let i = 2;\n    for (i; i > 0; i--) {\n      this.prisms.push(new Prism());\n    }\n\n    this.prisms.forEach(p => this.scene.add(p.mesh));\n  }\n\n  addFlooring() {\n    let geometry = new THREE.PlaneGeometry(1000, 1000, 10, 10);\n    geometry.rotateX(-Math.PI / 2);\n    geometry.rotateY(-Math.PI / 2);\n    let floorTexture = new THREE.TextureLoader().load(\n      \"images/wood-texture1.jpg\"\n    );\n    floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\n    floorTexture.repeat.set(15, 40);\n    let material = new THREE.MeshBasicMaterial({ map: floorTexture });\n    let mesh = new THREE.Mesh(geometry, material);\n    this.scene.add(mesh);\n  }\n\n  addLights() {\n    let light = new THREE.DirectionalLight(0xffffff);\n    light.position.y = 55;\n    light.position.z = -5;\n    let lightTarget = new THREE.Object3D();\n    lightTarget.position.x = -55;\n    lightTarget.position.z = -25;\n    lightTarget.position.y = 125;\n    light.target = lightTarget;\n    let lightHelper = new THREE.DirectionalLightHelper(light, 5, 0x000000);\n    this.scene.add(lightHelper);\n    this.scene.add(lightTarget);\n    this.scene.add(light);\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    const geometry = new THREE.BoxGeometry(20, 21, 1);\n    const material = new THREE.MeshLambertMaterial({ color: \"#433F81\" });\n    const cube = new THREE.Mesh(geometry, material);\n    camera.position.y = 14;\n    camera.position.x = 25;\n    camera.position.z = 100;\n    cube.position.x = 50;\n    this.scene = scene;\n    this.scene.add(cube);\n\n    renderer.setClearColor(\"#000000\");\n    renderer.setSize(width, height);\n\n    this.camera = camera;\n    this.renderer = renderer;\n    this.material = material;\n    this.cube = cube;\n    this.addLights();\n    this.createPrism();\n    this.createDomeRoof();\n    this.addFlooring();\n\n    this.mount.appendChild(this.renderer.domElement);\n    this.start();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.cube.rotation.x += 0.01;\n    this.cube.rotation.y += 0.01;\n\n    // this.tri.rotateZ(this.rotateConst);\n    this.prisms.forEach(p => p.rotate());\n    console.log(\"prisms\", this.prisms);\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        style={{ width: \"100%\", height: \"1000px\" }}\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\nexport default Scene;\n// ReactDOM.render(<Scene />, document.querySelector(\"#root\"));\n"]},"metadata":{},"sourceType":"module"}