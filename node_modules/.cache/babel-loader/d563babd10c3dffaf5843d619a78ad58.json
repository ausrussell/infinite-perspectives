{"ast":null,"code":"import _classCallCheck from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Russell/WebstormProjects/infinite_perspectives/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n\nvar Scene =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Scene, _Component);\n\n  function Scene(props) {\n    var _this;\n\n    _classCallCheck(this, Scene);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Scene).call(this, props));\n    _this.start = _this.start.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.stop = _this.stop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.animate = _this.animate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.rotateConst = 0.01;\n    return _this;\n  }\n\n  _createClass(Scene, [{\n    key: \"createDomeRoof\",\n    value: function createDomeRoof() {\n      var domeGeometry = new THREE.SphereGeometry(100, 10, 10, 0, Math.PI, 0, -Math.PI / 2); //, Math.PI, Math.PI\n\n      var domeMaterial = new THREE.MeshLambertMaterial({\n        color: 0x7fc5f9,\n        emissive: 0x25673d,\n        emissiveIntensity: 0.4,\n        side: THREE.DoubleSide // metalness: 0.5,\n        // roughness: 0.5\n\n      });\n      var dome = new THREE.Mesh(domeGeometry, domeMaterial);\n      dome.material.side = THREE.DoubleSide; // dome.rotateZ(1);\n\n      this.scene.add(dome);\n    }\n  }, {\n    key: \"createPrism\",\n    value: function createPrism() {\n      var length = 22,\n          width = 8;\n      var shape = new THREE.Shape();\n      shape.moveTo(-width, -length);\n      shape.lineTo(-length, width);\n      shape.lineTo(length, width);\n      shape.lineTo(-width, -length);\n      var extrudeSettings = {\n        depth: 100\n      };\n      var prismGeometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\n      var prismMaterial = new THREE.MeshLambertMaterial({\n        color: 0x22a570 // wireframe: true\n\n      });\n      var tri = new THREE.Mesh(prismGeometry, prismMaterial);\n      tri.position.z = -140;\n      tri.position.x = -45;\n      tri.position.y = 20;\n      this.scene.add(tri);\n      this.tri = tri;\n    }\n  }, {\n    key: \"addLights\",\n    value: function addLights() {\n      var light = new THREE.DirectionalLight(0xffffff);\n      light.position.y = 55;\n      light.position.z = -5;\n      var lightTarget = new THREE.Object3D();\n      lightTarget.position.x = -5;\n      lightTarget.position.z = -25;\n      lightTarget.position.y = 125;\n      light.target = lightTarget;\n      var lightHelper = new THREE.DirectionalLightHelper(light, 5, 0x000000);\n      this.scene.add(lightHelper);\n      this.scene.add(lightTarget);\n      this.scene.add(light);\n      var ambLight = new THREE.AmbientLight(0xffffff);\n      ambLight.intensity = 0.1;\n      this.scene.add(ambLight);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var width = this.mount.clientWidth;\n      var height = this.mount.clientHeight;\n      var scene = new THREE.Scene();\n      var camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      var renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      var geometry = new THREE.BoxGeometry(20, 21, 1);\n      var material = new THREE.MeshLambertMaterial({\n        color: \"#433F81\"\n      });\n      var cube = new THREE.Mesh(geometry, material);\n      camera.position.y = 4;\n      camera.position.x = 25;\n      camera.position.z = 100;\n      cube.position.x = 50;\n      this.scene = scene;\n      this.scene.add(cube);\n      renderer.setClearColor(\"#000000\");\n      renderer.setSize(width, height);\n      this.camera = camera;\n      this.renderer = renderer;\n      this.material = material;\n      this.cube = cube;\n      this.addLights();\n      this.createPrism();\n      this.createDomeRoof();\n      this.mount.appendChild(this.renderer.domElement);\n      this.start();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.stop();\n      this.mount.removeChild(this.renderer.domElement);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      cancelAnimationFrame(this.frameId);\n    }\n  }, {\n    key: \"animate\",\n    value: function animate() {\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01;\n      this.tri.rotateZ(this.rotateConst);\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    }\n  }, {\n    key: \"renderScene\",\n    value: function renderScene() {\n      this.renderer.render(this.scene, this.camera);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"1000px\"\n        },\n        ref: function ref(mount) {\n          _this2.mount = mount;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Scene;\n}(Component);\n\nReactDOM.render(React.createElement(Scene, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 159\n  },\n  __self: this\n}), document.querySelector(\"#root\")); // export default Scene;\n// const App = function() {\n//   const buttext = \"heyyyy\";\n//   return (\n//     <div>\n//       <label className=\"label\" htmlFor=\"name\">\n//         Enter name:\n//       </label>\n//       <input id=\"name\" type=\"text\" />\n//       <button style={{ backgroundColor: \"blue\", color: \"white\" }}>butt</button>\n//     </div>\n//   );\n// };\n//\n// ReactDOM.render(<App />, document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/Russell/WebstormProjects/infinite_perspectives/src/index.js"],"names":["React","Component","ReactDOM","THREE","Scene","props","start","bind","stop","animate","rotateConst","domeGeometry","SphereGeometry","Math","PI","domeMaterial","MeshLambertMaterial","color","emissive","emissiveIntensity","side","DoubleSide","dome","Mesh","material","scene","add","length","width","shape","Shape","moveTo","lineTo","extrudeSettings","depth","prismGeometry","ExtrudeGeometry","prismMaterial","tri","position","z","x","y","light","DirectionalLight","lightTarget","Object3D","target","lightHelper","DirectionalLightHelper","ambLight","AmbientLight","intensity","mount","clientWidth","height","clientHeight","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","geometry","BoxGeometry","cube","setClearColor","setSize","addLights","createPrism","createDomeRoof","appendChild","domElement","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","rotation","rotateZ","renderScene","window","render","document","querySelector"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n\n    this.rotateConst = 0.01;\n  }\n\n  createDomeRoof() {\n    let domeGeometry = new THREE.SphereGeometry(\n      100,\n      10,\n      10,\n      0,\n      Math.PI,\n      0,\n      -Math.PI / 2\n    ); //, Math.PI, Math.PI\n    let domeMaterial = new THREE.MeshLambertMaterial({\n      color: 0x7fc5f9,\n      emissive: 0x25673d,\n      emissiveIntensity: 0.4,\n      side: THREE.DoubleSide\n      // metalness: 0.5,\n      // roughness: 0.5\n    });\n\n    let dome = new THREE.Mesh(domeGeometry, domeMaterial);\n    dome.material.side = THREE.DoubleSide;\n    // dome.rotateZ(1);\n    this.scene.add(dome);\n  }\n\n  createPrism() {\n    let length = 22,\n      width = 8;\n\n    let shape = new THREE.Shape();\n    shape.moveTo(-width, -length);\n    shape.lineTo(-length, width);\n    shape.lineTo(length, width);\n    shape.lineTo(-width, -length);\n\n    let extrudeSettings = {\n      depth: 100\n    };\n\n    let prismGeometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\n    let prismMaterial = new THREE.MeshLambertMaterial({\n      color: 0x22a570\n\n      // wireframe: true\n    });\n    let tri = new THREE.Mesh(prismGeometry, prismMaterial);\n    tri.position.z = -140;\n    tri.position.x = -45;\n    tri.position.y = 20;\n    this.scene.add(tri);\n    this.tri = tri;\n  }\n\n  addLights() {\n    let light = new THREE.DirectionalLight(0xffffff);\n    light.position.y = 55;\n    light.position.z = -5;\n    let lightTarget = new THREE.Object3D();\n    lightTarget.position.x = -5;\n    lightTarget.position.z = -25;\n    lightTarget.position.y = 125;\n    light.target = lightTarget;\n    let lightHelper = new THREE.DirectionalLightHelper(light, 5, 0x000000);\n    this.scene.add(lightHelper);\n    this.scene.add(lightTarget);\n    this.scene.add(light);\n\n    let ambLight = new THREE.AmbientLight(0xffffff);\n    ambLight.intensity = 0.1;\n    this.scene.add(ambLight);\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    const geometry = new THREE.BoxGeometry(20, 21, 1);\n    const material = new THREE.MeshLambertMaterial({ color: \"#433F81\" });\n    const cube = new THREE.Mesh(geometry, material);\n    camera.position.y = 4;\n    camera.position.x = 25;\n    camera.position.z = 100;\n    cube.position.x = 50;\n    this.scene = scene;\n    this.scene.add(cube);\n\n    renderer.setClearColor(\"#000000\");\n    renderer.setSize(width, height);\n\n    this.camera = camera;\n    this.renderer = renderer;\n    this.material = material;\n    this.cube = cube;\n    this.addLights();\n    this.createPrism();\n    this.createDomeRoof();\n\n    this.mount.appendChild(this.renderer.domElement);\n    this.start();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.cube.rotation.x += 0.01;\n    this.cube.rotation.y += 0.01;\n\n    this.tri.rotateZ(this.rotateConst);\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        style={{ width: \"100%\", height: \"1000px\" }}\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Scene />, document.querySelector(\"#root\"));\n// export default Scene;\n// const App = function() {\n//   const buttext = \"heyyyy\";\n//   return (\n//     <div>\n//       <label className=\"label\" htmlFor=\"name\">\n//         Enter name:\n//       </label>\n//       <input id=\"name\" type=\"text\" />\n//       <button style={{ backgroundColor: \"blue\", color: \"white\" }}>butt</button>\n//     </div>\n//   );\n// };\n//\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}