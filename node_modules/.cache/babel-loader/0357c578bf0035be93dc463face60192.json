{"ast":null,"code":"import _classCallCheck from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Russell/WebstormProjects/infinite_perspectives/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n\nvar Scene =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Scene, _Component);\n\n  function Scene(props) {\n    var _this;\n\n    _classCallCheck(this, Scene);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Scene).call(this, props));\n    _this.start = _this.start.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.stop = _this.stop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.animate = _this.animate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Scene, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var width = this.mount.clientWidth;\n      var height = this.mount.clientHeight;\n      var scene = new THREE.Scene();\n      var camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      var renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      var geometry = new THREE.BoxGeometry(1, 1, 1);\n      var material = new THREE.MeshBasicMaterial({\n        color: \"#433F81\"\n      });\n      var cube = new THREE.Mesh(geometry, material);\n      camera.position.z = 4;\n      scene.add(cube);\n      renderer.setClearColor(\"#000000\");\n      renderer.setSize(width, height);\n      this.scene = scene;\n      this.camera = camera;\n      this.renderer = renderer;\n      this.material = material;\n      this.cube = cube;\n      this.mount.appendChild(this.renderer.domElement);\n      this.start();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.stop();\n      this.mount.removeChild(this.renderer.domElement);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      cancelAnimationFrame(this.frameId);\n    }\n  }, {\n    key: \"animate\",\n    value: function animate() {\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01;\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    }\n  }, {\n    key: \"renderScene\",\n    value: function renderScene() {\n      this.renderer.render(this.scene, this.camera);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"400px\"\n        },\n        ref: function ref(mount) {\n          _this2.mount = mount;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Scene;\n}(Component);\n\nReactDOM.render(React.createElement(Scene, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78\n  },\n  __self: this\n}), document.querySelector(\"#root\")); // export default Scene;\n// const App = function() {\n//   const buttext = \"heyyyy\";\n//   return (\n//     <div>\n//       <label className=\"label\" htmlFor=\"name\">\n//         Enter name:\n//       </label>\n//       <input id=\"name\" type=\"text\" />\n//       <button style={{ backgroundColor: \"blue\", color: \"white\" }}>butt</button>\n//     </div>\n//   );\n// };\n//\n// ReactDOM.render(<App />, document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/Russell/WebstormProjects/infinite_perspectives/src/index.js"],"names":["React","Component","ReactDOM","THREE","Scene","props","start","bind","stop","animate","width","mount","clientWidth","height","clientHeight","scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","position","z","add","setClearColor","setSize","appendChild","domElement","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","rotation","x","y","renderScene","window","render","document","querySelector"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({ color: \"#433F81\" });\n    const cube = new THREE.Mesh(geometry, material);\n\n    camera.position.z = 4;\n    scene.add(cube);\n    renderer.setClearColor(\"#000000\");\n    renderer.setSize(width, height);\n\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    this.material = material;\n    this.cube = cube;\n\n    this.mount.appendChild(this.renderer.domElement);\n    this.start();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.cube.rotation.x += 0.01;\n    this.cube.rotation.y += 0.01;\n\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        style={{ width: \"100%\", height: \"400px\" }}\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Scene />, document.querySelector(\"#root\"));\n// export default Scene;\n// const App = function() {\n//   const buttext = \"heyyyy\";\n//   return (\n//     <div>\n//       <label className=\"label\" htmlFor=\"name\">\n//         Enter name:\n//       </label>\n//       <input id=\"name\" type=\"text\" />\n//       <button style={{ backgroundColor: \"blue\", color: \"white\" }}>butt</button>\n//     </div>\n//   );\n// };\n//\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}