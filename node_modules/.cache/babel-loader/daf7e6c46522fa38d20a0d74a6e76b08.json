{"ast":null,"code":"import _classCallCheck from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\"; // import * as files from \"./files.js\";\n\nvar Prism =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Prism, _Component);\n\n  function Prism(props) {\n    var _this;\n\n    _classCallCheck(this, Prism);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Prism).call(this, props)); // console.log(\"files\", files);\n\n    _this.rotateConst = 0.01;\n    _this.prismLength = 8;\n    _this.prismWidth = 8;\n    var shape = new THREE.Shape();\n    shape.moveTo(-_this.prismWidth, -_this.prismLength);\n    shape.lineTo(-_this.prismLength, _this.prismWidth);\n    shape.lineTo(_this.prismLength, _this.prismWidth);\n    shape.lineTo(-_this.prismWidth, -_this.prismLength);\n    var extrudeSettings = {\n      depth: 100\n    }; // let prismGeometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\n\n    var prismGeometry = new THREE.BoxGeometry(10, 10, 20, 1, 1, 2); //shape, extrudeSettings\n\n    var prismMaterial = new THREE.MeshLambertMaterial({\n      color: Math.random() * 0xffffff,\n      wireframe: true\n    });\n    var mesh = new THREE.Mesh(prismGeometry, prismMaterial);\n    mesh.position.z = _this.randomInRange(10, 20);\n    mesh.position.x = _this.randomInRange(-35, -20);\n    mesh.position.y = _this.randomInRange(10, 20); // this.scene.add(tri);\n\n    _this.mesh = mesh;\n\n    _this.createPicturePrism();\n\n    return _possibleConstructorReturn(_this, _assertThisInitialized(_assertThisInitialized(_this)));\n  }\n\n  _createClass(Prism, [{\n    key: \"createPicturePrism\",\n    value: function createPicturePrism() {\n      var picturePrismWidth = this.prismWidth * 1.1,\n          picturePrismLength = this.prismLength * 1.1;\n      var shape = new THREE.Shape();\n      shape.moveTo(-this.prismWidth, -this.prismLength);\n      shape.lineTo(-this.prismLength, this.prismWidth);\n      shape.lineTo(this.prismLength, this.prismWidth);\n      shape.lineTo(-this.prismWidth, -this.prismLength);\n      var extrudeSettings = {\n        depth: 100\n      };\n      var loader = new THREE.TextureLoader();\n      var prismGeometry = new THREE.PlaneGeometry(10, 10); //(20, 30, 30); //new THREE.SphereGeometry(50, 20, 20); //shape, extrudeSettings); //new THREE.PlaneGeometry(10, 10);PlaneGeometry\n\n      var imgSrc = \"images/mum_breakfast.jpg\";\n      var tex = new THREE.TextureLoader().load(imgSrc, function (tex) {\n        tex.needsUpdate = true;\n        pictureMesh.scale.set(1, tex.image.height / tex.image.width, 1.0);\n      }); // tex.wrapS = tex.wrapT = THREE.RepeatWrapping;\n      // tex.repeat.set(2, 2);\n      // debugger;\n      // this.mesh.geometry.vertices[0];\n\n      var prismMaterial = new THREE.MeshLambertMaterial({\n        color: 0xffffff,\n        map: tex // wireframe: true\n\n      });\n      var pictureMesh = new THREE.Mesh(prismGeometry, prismMaterial); // pictureMesh.rotateY(Math.PI / 2);\n      // pictureMesh.position.x = this.mesh.position.x + 18;\n      //\n\n      pictureMesh.position.x = this.mesh.position.x + 1;\n      pictureMesh.position.y = this.mesh.position.y;\n      pictureMesh.position.z = this.mesh.position.z; // pictureMesh.position.z = this.mesh.position.z;\n\n      this.pictureMesh = pictureMesh;\n      var meshVertices = this.mesh.geometry.vertices;\n      this.pictureMesh.geometry.vertices[0] = meshVertices[0];\n      this.pictureMesh.geometry.vertices[1] = meshVertices[1];\n      this.pictureMesh.geometry.vertices[2] = meshVertices[3];\n      this.pictureMesh.geometry.vertices[3] = meshVertices[4];\n      this.pictureMesh.geometry.verticesNeedUpdate = true;\n      console.log(\"this.mesh\", this.mesh);\n      console.log(\"this.pictureMesh\", this.pictureMesh);\n    }\n  }, {\n    key: \"randomInRange\",\n    value: function randomInRange(from, to) {\n      var x = Math.random() * (to - from);\n      return x + from;\n    }\n  }, {\n    key: \"add\",\n    value: function add(scene) {\n      scene.add(this.mesh);\n      scene.add(this.pictureMesh);\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate() {\n      // debugger;\n      this.mesh.rotateZ(this.rotateConst);\n      this.pictureMesh.rotateZ(this.rotateConst); // this.pictureMesh.rotateX(this.rotateConst);\n      // this.pictureMesh.rotateY(this.rotateConst);\n    }\n  }]);\n\n  return Prism;\n}(Component);\n\nexport default Prism;","map":{"version":3,"sources":["/Users/Russell/WebstormProjects/infinite_perspectives/src/prism.js"],"names":["React","Component","THREE","Prism","props","rotateConst","prismLength","prismWidth","shape","Shape","moveTo","lineTo","extrudeSettings","depth","prismGeometry","BoxGeometry","prismMaterial","MeshLambertMaterial","color","Math","random","wireframe","mesh","Mesh","position","z","randomInRange","x","y","createPicturePrism","picturePrismWidth","picturePrismLength","loader","TextureLoader","PlaneGeometry","imgSrc","tex","load","needsUpdate","pictureMesh","scale","set","image","height","width","map","meshVertices","geometry","vertices","verticesNeedUpdate","console","log","from","to","scene","add","rotateZ"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\n// import * as files from \"./files.js\";\n\nclass Prism extends Component {\n  constructor(props) {\n    super(props);\n    // console.log(\"files\", files);\n    this.rotateConst = 0.01;\n    this.prismLength = 8;\n    this.prismWidth = 8;\n\n    let shape = new THREE.Shape();\n    shape.moveTo(-this.prismWidth, -this.prismLength);\n    shape.lineTo(-this.prismLength, this.prismWidth);\n    shape.lineTo(this.prismLength, this.prismWidth);\n    shape.lineTo(-this.prismWidth, -this.prismLength);\n\n    let extrudeSettings = {\n      depth: 100\n    };\n\n    // let prismGeometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\n\n    let prismGeometry = new THREE.BoxGeometry(10, 10, 20, 1, 1, 2); //shape, extrudeSettings\n\n    let prismMaterial = new THREE.MeshLambertMaterial({\n      color: Math.random() * 0xffffff,\n\n      wireframe: true\n    });\n    let mesh = new THREE.Mesh(prismGeometry, prismMaterial);\n    mesh.position.z = this.randomInRange(10, 20);\n    mesh.position.x = this.randomInRange(-35, -20);\n    mesh.position.y = this.randomInRange(10, 20);\n    // this.scene.add(tri);\n    this.mesh = mesh;\n    this.createPicturePrism();\n    return this;\n  }\n  createPicturePrism() {\n    let picturePrismWidth = this.prismWidth * 1.1,\n      picturePrismLength = this.prismLength * 1.1;\n    let shape = new THREE.Shape();\n    shape.moveTo(-this.prismWidth, -this.prismLength);\n    shape.lineTo(-this.prismLength, this.prismWidth);\n    shape.lineTo(this.prismLength, this.prismWidth);\n    shape.lineTo(-this.prismWidth, -this.prismLength);\n\n    let extrudeSettings = {\n      depth: 100\n    };\n    var loader = new THREE.TextureLoader();\n    let prismGeometry = new THREE.PlaneGeometry(10, 10); //(20, 30, 30); //new THREE.SphereGeometry(50, 20, 20); //shape, extrudeSettings); //new THREE.PlaneGeometry(10, 10);PlaneGeometry\n\n    let imgSrc = \"images/mum_breakfast.jpg\";\n    var tex = new THREE.TextureLoader().load(imgSrc, tex => {\n      tex.needsUpdate = true;\n      pictureMesh.scale.set(1, tex.image.height / tex.image.width, 1.0);\n    });\n    // tex.wrapS = tex.wrapT = THREE.RepeatWrapping;\n    // tex.repeat.set(2, 2);\n    // debugger;\n\n    // this.mesh.geometry.vertices[0];\n    let prismMaterial = new THREE.MeshLambertMaterial({\n      color: 0xffffff,\n      map: tex\n      // wireframe: true\n    });\n    let pictureMesh = new THREE.Mesh(prismGeometry, prismMaterial);\n    // pictureMesh.rotateY(Math.PI / 2);\n    // pictureMesh.position.x = this.mesh.position.x + 18;\n    //\n    pictureMesh.position.x = this.mesh.position.x + 1;\n    pictureMesh.position.y = this.mesh.position.y;\n    pictureMesh.position.z = this.mesh.position.z;\n    // pictureMesh.position.z = this.mesh.position.z;\n    this.pictureMesh = pictureMesh;\n    let meshVertices = this.mesh.geometry.vertices;\n    this.pictureMesh.geometry.vertices[0] = meshVertices[0];\n    this.pictureMesh.geometry.vertices[1] = meshVertices[1];\n    this.pictureMesh.geometry.vertices[2] = meshVertices[3];\n    this.pictureMesh.geometry.vertices[3] = meshVertices[4];\n    this.pictureMesh.geometry.verticesNeedUpdate = true;\n\n    console.log(\"this.mesh\", this.mesh);\n    console.log(\"this.pictureMesh\", this.pictureMesh);\n  }\n  randomInRange(from, to) {\n    let x = Math.random() * (to - from);\n    return x + from;\n  }\n  add(scene) {\n    scene.add(this.mesh);\n    scene.add(this.pictureMesh);\n  }\n  rotate() {\n    // debugger;\n    this.mesh.rotateZ(this.rotateConst);\n    this.pictureMesh.rotateZ(this.rotateConst);\n    // this.pictureMesh.rotateX(this.rotateConst);\n    // this.pictureMesh.rotateY(this.rotateConst);\n  }\n}\n\nexport default Prism;\n"]},"metadata":{},"sourceType":"module"}