{"ast":null,"code":"import _classCallCheck from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Russell/WebstormProjects/infinite_perspectives/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\n\nvar Prism =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Prism, _Component);\n\n  function Prism(props) {\n    var _this;\n\n    _classCallCheck(this, Prism);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Prism).call(this, props));\n    _this.rotateConst = 0.01;\n    _this.prismLength = 8, _this.prismWidth = 8;\n    var shape = new THREE.Shape();\n    shape.moveTo(-_this.prismWidth, -_this.prismLength);\n    shape.lineTo(-_this.prismLength, _this.prismWidth);\n    shape.lineTo(_this.prismLength, _this.prismWidth);\n    shape.lineTo(-_this.prismWidth, -_this.prismLength);\n    var extrudeSettings = {\n      depth: 100\n    };\n    var prismGeometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\n    var prismMaterial = new THREE.MeshLambertMaterial({\n      color: Math.random() * 0xffffff // wireframe: true\n\n    });\n    var mesh = new THREE.Mesh(prismGeometry, prismMaterial);\n    mesh.position.z = _this.randomInRange(-140, 0);\n    mesh.position.x = _this.randomInRange(-90, 90);\n    mesh.position.y = _this.randomInRange(10, 20); // this.scene.add(tri);\n\n    _this.mesh = mesh;\n\n    _this.createPicturePrism();\n\n    return _possibleConstructorReturn(_this, _assertThisInitialized(_assertThisInitialized(_this)));\n  }\n\n  _createClass(Prism, [{\n    key: \"createPicturePrism\",\n    value: function createPicturePrism() {// let picturePrismWidth = this.prismWidth * 1.1,\n      //   picturePrismLength = this.prismLength * 1.1;\n      // let shape = new THREE.Shape();\n      // shape.moveTo(-this.prismWidth, -this.prismLength);\n      // shape.lineTo(-this.prismLength, this.prismWidth);\n      // shape.lineTo(this.prismLength, this.prismWidth);\n      // shape.lineTo(-this.prismWidth, -this.prismLength);\n      //\n      // let extrudeSettings = {\n      //   depth: 100\n      // };\n      // // var loader = new THREE.TextureLoader();\n      // let prismGeometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\n      // let prismMaterial = new THREE.MeshLambertMaterial({\n      //   // map: loader.load(\"images/mum_breakfast.jpg\")\n      //   // wireframe: true\n      // });\n      // let pictureMesh = new THREE.Mesh(prismGeometry, prismMaterial);\n      // pictureMesh.position.x = this.mesh.position.x;\n      // pictureMesh.position.y = this.mesh.position.y;\n      // pictureMesh.position.z = this.mesh.position.z;\n      // // this.scene.add(tri);\n      // this.pictureMesh = pictureMesh;\n    }\n  }, {\n    key: \"randomInRange\",\n    value: function randomInRange(from, to) {\n      var x = Math.random() * (to - from);\n      return x + from;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate() {\n      this.mesh.rotateZ(this.rotateConst);\n      this.pictureMesh.rotateZ(this.rotateConst);\n    }\n  }]);\n\n  return Prism;\n}(Component);\n\nexport default Prism;","map":{"version":3,"sources":["/Users/Russell/WebstormProjects/infinite_perspectives/src/prism.js"],"names":["React","Component","THREE","Prism","props","rotateConst","prismLength","prismWidth","shape","Shape","moveTo","lineTo","extrudeSettings","depth","prismGeometry","ExtrudeGeometry","prismMaterial","MeshLambertMaterial","color","Math","random","mesh","Mesh","position","z","randomInRange","x","y","createPicturePrism","from","to","rotateZ","pictureMesh"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;IACMC,K;;;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AACA,UAAKC,WAAL,GAAmB,IAAnB;AACC,UAAKC,WAAL,GAAmB,CAApB,EAAyB,MAAKC,UAAL,GAAkB,CAA3C;AAEA,QAAIC,KAAK,GAAG,IAAIN,KAAK,CAACO,KAAV,EAAZ;AACAD,IAAAA,KAAK,CAACE,MAAN,CAAa,CAAC,MAAKH,UAAnB,EAA+B,CAAC,MAAKD,WAArC;AACAE,IAAAA,KAAK,CAACG,MAAN,CAAa,CAAC,MAAKL,WAAnB,EAAgC,MAAKC,UAArC;AACAC,IAAAA,KAAK,CAACG,MAAN,CAAa,MAAKL,WAAlB,EAA+B,MAAKC,UAApC;AACAC,IAAAA,KAAK,CAACG,MAAN,CAAa,CAAC,MAAKJ,UAAnB,EAA+B,CAAC,MAAKD,WAArC;AAEA,QAAIM,eAAe,GAAG;AACpBC,MAAAA,KAAK,EAAE;AADa,KAAtB;AAIA,QAAIC,aAAa,GAAG,IAAIZ,KAAK,CAACa,eAAV,CAA0BP,KAA1B,EAAiCI,eAAjC,CAApB;AACA,QAAII,aAAa,GAAG,IAAId,KAAK,CAACe,mBAAV,CAA8B;AAChDC,MAAAA,KAAK,EAAEC,IAAI,CAACC,MAAL,KAAgB,QADyB,CAGhD;;AAHgD,KAA9B,CAApB;AAKA,QAAIC,IAAI,GAAG,IAAInB,KAAK,CAACoB,IAAV,CAAeR,aAAf,EAA8BE,aAA9B,CAAX;AACAK,IAAAA,IAAI,CAACE,QAAL,CAAcC,CAAd,GAAkB,MAAKC,aAAL,CAAmB,CAAC,GAApB,EAAyB,CAAzB,CAAlB;AACAJ,IAAAA,IAAI,CAACE,QAAL,CAAcG,CAAd,GAAkB,MAAKD,aAAL,CAAmB,CAAC,EAApB,EAAwB,EAAxB,CAAlB;AACAJ,IAAAA,IAAI,CAACE,QAAL,CAAcI,CAAd,GAAkB,MAAKF,aAAL,CAAmB,EAAnB,EAAuB,EAAvB,CAAlB,CAxBiB,CAyBjB;;AACA,UAAKJ,IAAL,GAAYA,IAAZ;;AACA,UAAKO,kBAAL;;AACA;AACD;;;;yCACoB,CACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;kCACaC,I,EAAMC,E,EAAI;AACtB,UAAIJ,CAAC,GAAGP,IAAI,CAACC,MAAL,MAAiBU,EAAE,GAAGD,IAAtB,CAAR;AACA,aAAOH,CAAC,GAAGG,IAAX;AACD;;;6BACQ;AACP,WAAKR,IAAL,CAAUU,OAAV,CAAkB,KAAK1B,WAAvB;AACA,WAAK2B,WAAL,CAAiBD,OAAjB,CAAyB,KAAK1B,WAA9B;AACD;;;;EA/DiBJ,S;;AAkEpB,eAAeE,KAAf","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nclass Prism extends Component {\n  constructor(props) {\n    super(props);\n    this.rotateConst = 0.01;\n    (this.prismLength = 8), (this.prismWidth = 8);\n\n    let shape = new THREE.Shape();\n    shape.moveTo(-this.prismWidth, -this.prismLength);\n    shape.lineTo(-this.prismLength, this.prismWidth);\n    shape.lineTo(this.prismLength, this.prismWidth);\n    shape.lineTo(-this.prismWidth, -this.prismLength);\n\n    let extrudeSettings = {\n      depth: 100\n    };\n\n    let prismGeometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\n    let prismMaterial = new THREE.MeshLambertMaterial({\n      color: Math.random() * 0xffffff\n\n      // wireframe: true\n    });\n    let mesh = new THREE.Mesh(prismGeometry, prismMaterial);\n    mesh.position.z = this.randomInRange(-140, 0);\n    mesh.position.x = this.randomInRange(-90, 90);\n    mesh.position.y = this.randomInRange(10, 20);\n    // this.scene.add(tri);\n    this.mesh = mesh;\n    this.createPicturePrism();\n    return this;\n  }\n  createPicturePrism() {\n    // let picturePrismWidth = this.prismWidth * 1.1,\n    //   picturePrismLength = this.prismLength * 1.1;\n    // let shape = new THREE.Shape();\n    // shape.moveTo(-this.prismWidth, -this.prismLength);\n    // shape.lineTo(-this.prismLength, this.prismWidth);\n    // shape.lineTo(this.prismLength, this.prismWidth);\n    // shape.lineTo(-this.prismWidth, -this.prismLength);\n    //\n    // let extrudeSettings = {\n    //   depth: 100\n    // };\n    // // var loader = new THREE.TextureLoader();\n    // let prismGeometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\n    // let prismMaterial = new THREE.MeshLambertMaterial({\n    //   // map: loader.load(\"images/mum_breakfast.jpg\")\n    //   // wireframe: true\n    // });\n    // let pictureMesh = new THREE.Mesh(prismGeometry, prismMaterial);\n    // pictureMesh.position.x = this.mesh.position.x;\n    // pictureMesh.position.y = this.mesh.position.y;\n    // pictureMesh.position.z = this.mesh.position.z;\n    // // this.scene.add(tri);\n    // this.pictureMesh = pictureMesh;\n  }\n  randomInRange(from, to) {\n    let x = Math.random() * (to - from);\n    return x + from;\n  }\n  rotate() {\n    this.mesh.rotateZ(this.rotateConst);\n    this.pictureMesh.rotateZ(this.rotateConst);\n  }\n}\n\nexport default Prism;\n"]},"metadata":{},"sourceType":"module"}